"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidTypeError = void 0;
const common_1 = require("../fhirtypes/common");
class InvalidTypeError extends Error {
    constructor(invalidType, allowedTypes) {
        super(`The type "${invalidType}" does not match any of the allowed types: ${allowedTypesToString(allowedTypes)}`);
        this.invalidType = invalidType;
        this.allowedTypes = allowedTypes;
        this.specReferences = [
            'http://hl7.org/fhir/R4/elementdefinition-definitions.html#ElementDefinition.type'
        ];
    }
}
exports.InvalidTypeError = InvalidTypeError;
/**
 * Represents allowed types as a string of choices.  Example outputs:
 * - Condition or Procedure
 * - http://example.org/fhir/StructureDefinition/SimpleProcedure
 * - Reference(Patient | Practitioner)
 * - Condition or http://example.org/fhir/StructureDefinition/SimpleProcedure or Reference(Patient | Practitioner)
 * @param types - the allowed types to serialize to a string
 */
function allowedTypesToString(types) {
    if (types == null || types.length === 0) {
        return '<none>';
    }
    const strings = [];
    types.forEach(t => {
        var _a, _b, _c;
        if ((0, common_1.isReferenceType)(t.code)) {
            strings.push(`Reference(${((_a = t.targetProfile) !== null && _a !== void 0 ? _a : []).join(' | ')})`);
        }
        else if (t.code === 'canonical') {
            strings.push(`Canonical(${((_b = t.targetProfile) !== null && _b !== void 0 ? _b : []).join(' | ')})`);
        }
        else if (((_c = t.profile) === null || _c === void 0 ? void 0 : _c.length) > 0) {
            strings.push(...t.profile);
        }
        else {
            strings.push(t.code);
        }
    });
    return strings.join(' or ');
}
//# sourceMappingURL=InvalidTypeError.js.map